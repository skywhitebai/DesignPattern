通过这些模式让你找到“封装变化”、“对象间松散耦合”、“针对接口编程”的感觉，从而设计出易维护、易扩展、易复用、灵活性好的程序。


面向对象的好处：
通过封装、继承、多态把程序的耦合度降低,高内聚，低耦合
用设计模式使得程序更加的灵活、容易修改，并且易于复用

简单工厂模式：


策略模式：
面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类
策略模式strategy：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。
策略模式是一种定义一系列算法的方法，从概念上讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用
所有的算法，减少了各种算法类与使用算法类之间的耦合。
策略模式的strategy类层次为context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
策略模式的有点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。
策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间
应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。
自我理解：例如促销模式修改，只需要添加新的促销策略即可，不需要修改以前的代码，达到解耦和可扩展

单一职责原则：SRP
单一职责原则，就一个类而言，应该仅有一个引起它变化的原因。
如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦
合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。
软件设计真正要做的许多内容，就是发现职责并把那些职责互相分离。
如果你能想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。
代码要易维护、易扩展、易复用、灵活多样。

开放-封闭原则：
开放-封闭原则，是说软件实体（类、模块、函数等等），应该可以扩展，但是不可修改。
对于扩展是开放的，对于修改是封闭的。
面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有代码。
开放-封闭原则是面向对象的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活
性好。开发人员应该仅对程序中呈现出频繁变化的那部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个
好主意。拒绝不成熟的抽象和抽象本身一样重要。

依赖倒转原则：
依赖倒转原则，抽象不应该依赖细节，细节应该依赖抽象。针对接口编程，不要针对实现编程。
依赖倒转原则：
A.高层模块不应该依赖底层模块。两个都应该依赖抽象。
B.抽象不应该依赖细节，细节应该依赖抽象

里氏替换原则：
一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且觉察不出父类对像和子类对象的区别。也就是说，在软件里面，
把父类都替换成它的子类，程序的行为没有变化。
里氏替换原则：子类型必须能替换掉它的父类型。
只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。
由于有里氏替换原则，才使得开放-封闭原则成为了可能。
由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。
依赖倒转其实可以说是面向对象设计的标志，用那种语言编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，
即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。

P62
装饰模式：
装饰模式（Decorator），动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更加灵活。
装饰模式是利用SetComponent来对对象进行包装的，每个装饰对象的实现和如何使用这个对象分离开，每个装饰对象只关心自己的功能，
不需要关心如何被添加到对象链当中。
装饰模式是为已有功能动态地添加更多功能的一种方式。
装饰模式把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以运行
时根据需要选择地、按顺序的使用装饰功能包装对象。
装饰模式的优点，把类中的装饰功能从类中搬移去除，这样可以简化原来的类。
有效地把类的核心职责和装饰功能区分开了。而且可以去除相关类中重复的装饰逻辑。

代理模式:
代理模式(Proxy):为其他对象提供一种代理以控制对这个对象的访问。
代理模式的应用：
第一，远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在不同地址空间的事实。
第二，虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。
第三，安全代理，用来控制真实对象访问时的权限。
第四，智能指引，是指当调用真实的对象时，代理处理另外一些事。

P66
