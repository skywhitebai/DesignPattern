通过封装、继承、多态把程序的耦合度降低,高内聚，低耦合
用设计模式使得程序更加的灵活、容易修改，并且易于复用

策略模式：
面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类
策略模式strategy：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。
策略模式是一种定义一系列算法的方法，从概念上讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用
所有的算法，减少了各种算法类与使用算法类之间的耦合。
策略模式的strategy类层次为context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
策略模式的有点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。
策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间
应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。
自我理解：例如促销模式修改，只需要添加新的促销策略即可，不需要修改以前的代码，达到解耦和可扩展

单一职责原则：SRP
单一职责原则，就一个类而言，应该仅有一个引起它变化的原因。
如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦
合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。
软件设计真正要做的许多内容，就是发现职责并把那些职责互相分离。
如果你能想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。
代码要易维护、易扩展、易复用、灵活多样。

开放-封闭原则：
开放-封闭原则，是说软件实体（类、模块、函数等等），应该可以扩展，但是不可修改。
对于扩展是开放的，对于修改是封闭的。
面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有代码。
开放-封闭原则是面向对象的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活
性好。开发人员应该仅对程序中呈现出频繁变化的那部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个
好主意。拒绝不成熟的抽象和抽象本身一样重要。
